# Cheat sheet of chapter 2, 3, and 4 of the Python Data Science Handbook.
# Part 1 ----> NumPy
# --------------------------------------------------------------------------------------------
# Let's create an array from Python list.
import numpy as np
np.array([0, 1, 2, 3, 4, 5])
# output
# array([0, 1, 2, 3, 4, 5])
# -------------------------------------------------------------------------------------------
# What happens if all of the elements are NOT the same type?
# Are the results the same as Python lists?
np.array([0, 1.55, 2, 3.0, 4, 5.12])
# output
# array([0. , 1.55, 2. , 3. , 4. , 5.12])
# -------------------------------------------------------------------------------------------
# How to set the data type of the resulting array?
np.array([0.12, 34, 7.9, 0.45, 11], dtype='float')
# output
# array([ 0.12, 34. , 7.9 , 0.45, 11. ])
# -------------------------------------------------------------------------------------------
# Let's play a little bit with NumPy arrays.
# Part 1
# Creating a length-5 integer array filled with a linear sequence of ones.
np.ones(5, dtype=int)
# output
# array([1, 1, 1, 1, 1])
# ------------------------------------------------------------------------------------------
# Part 2
# Creating a linear sequence array with the range() function usage.
np.arange(0, 20, 3)
# output
# array([ 0, 3, 6, 9, 12, 15, 18])
# ------------------------------------------------------------------------------------------
# How to create multidimensional arrays in NumPy?
# Part 1
# A 6*4 floating-point array filled with zeros.
np.zeros((6, 4), dtype=float)
# output
# array([[0., 0., 0., 0.],
# [0., 0., 0., 0.],
# [0., 0., 0., 0.],
# [0., 0., 0., 0.],
# [0., 0., 0., 0.],
# [0., 0., 0., 0.]])
# -----------------------------------------------------------------------------------------
# Part 2
# A nested list.
np.array([range(i, i + 3) for i in [2, 4, 6]])
# output
# array([[2, 3, 4],
# [4, 5, 6],
# [6, 7, 8]])
# ----------------------------------------------------------------------------------------
# Let's move on to the random world which has a huge community of fans...
# Part 1
# Creating random values between 0 and 1.
np.random.random((3, 3))
# output
# array([[0.77868043, 0.79375763, 0.0823962 ],
# [0.88809593, 0.38816881, 0.95659764],
# [0.41044275, 0.14266173, 0.86971285]])
# ----------------------------------------------------------------------------------------
# Part 2
# Creating a 3*3 array of normally distributed random values with mean 0 and standard deviation 1.
np.random.normal(0, 1, (3, 3))
# output
# array([[ 0.31000495, -0.0530152 , -1.11407945],
# [-0.97639249, 0.40577697, 0.53303564],
# [1.11985983, -0.634299 , 0.03508759]])
# ----------------------------------------------------------------------------------------
# Remeber the identity matrix?!
# Let's create a 3*3 one.
np.eye(3)
# output
# array([[1., 0., 0.],
# [0., 1., 0.],
# [0., 0., 1.]])
# -----------------------------------------------------------------------------------------
# Let's examine the NumPy random method in detail...
import numpy as np
# Let's generate a 1D random array...
one_dim_arr = np.random.randint(10, size=6)
print(one_dim_arr)
# output
# [3 0 5 9 3 7]
# -----------------------------------------------------------------------------------------
# Let's generate a 2D random array...
two_dim_arr = np.random.randint(10, size=(3, 4))
print(two_dim_arr)
# output
# [[1 7 8 6]
# [4 7 3 5]
# [3 6 4 7]]
# ----------------------------------------------------------------------------------------
# Let's generate a 3D random array...
three_dim_arr = np.random.randint(10, size=(3, 4, 5))
print(three_dim_arr)
# output
# [[[5 5 8 0 8]
# [3 6 9 3 2]
# [7 0 3 0 3]
# [6 1 9 2 9]]
# [[4 9 1 3 2]
# [4 9 7 4 9]
# [4 1 2 7 2]
# [3 9 7 6 6]]
# [[2 3 6 0 8]
# [0 7 6 5 9]
# [6 5 2 7 1]
# [9 2 2 5 6]]]
# ----------------------------------------------------------------------------------------
# Let's print the number of the dimensions of each array...
print("The dim of one_dim_arr is:", one_dim_arr.ndim)
print("The dim of two_dim_arr is:", two_dim_arr.ndim)
print("The dim of three_dim_arr is:", three_dim_arr.ndim)
# output
# The dim of one_dim_arr is: 1
# The dim of two_dim_arr is: 2
# The dim of three_dim_arr is: 3
# ----------------------------------------------------------------------------------------
# Let's print the shape of each array...
print("The shape of one_dim_arr is:", one_dim_arr.shape)
print("The shape of two_dim_arr is:", two_dim_arr.shape)
print("The shape of three_dim_arr is:", three_dim_arr.shape)
# output
# The shape of one_dim_arr is: (6,)
# The shape of two_dim_arr is: (3, 4)
# The shape of three_dim_arr is: (3, 4, 5)
# ----------------------------------------------------------------------------------------
# Let's print the size of each array...
print("The size of one_dim_arr is:", one_dim_arr.size)
print("The size of two_dim_arr is:", two_dim_arr.size)
print("The size of three_dim_arr is:", three_dim_arr.size)
# output
# The size of one_dim_arr is: 6
# The size of two_dim_arr is: 12
# The size of three_dim_arr is: 60
# ----------------------------------------------------------------------------------------
# Consider the array below.
my_arr = np.random.randint(10, size=(3, 4))
print(my_arr)
# output
# [[8 1 0 5]
# [8 2 3 5]
# [3 8 6 4]]
# ----------------------------------------------------------------------------------------
# Let's access 3 single elements of this array.
print(my_arr[0, 0])
print(my_arr[1, 2])
print(my_arr[-1, 2])
# output
# 8
# 3
# 6
# ----------------------------------------------------------------------------------------
# Consider the array below.
arr_1 = np.arange(21)
print(arr_1)
# output
# [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20]
# ----------------------------------------------------------------------------------------
# Let's get the even elements of this array...
arr_1[::2]
# output
# array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20])
# ----------------------------------------------------------------------------------------
# Now, let's get the odd elements of this array...
arr_1[1::2]
# output
# array([ 1, 3, 5, 7, 9, 11, 13, 15, 17, 19])
# ----------------------------------------------------------------------------------------
# Finally, let's get the elements with the reversed position...
arr_1[::-1]
# output
# array([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4,
# 3, 2, 1, 0])
arr_2 = np.random.randint(12, size=(3, 4))
print(arr_2)
# output
# [[10 2 9 11]
# [ 9 3 2 5]
# [10 4 1 5]]
# ---------------------------------------------------------------------------------------
# Let's get 2 rows and 3 columns of the array above.
arr_2[:2, :3] # number of rows, number of columns
# output
# array([[10, 2, 9],
# [9, 3, 2]])
# ---------------------------------------------------------------------------------------
# How about getting the elements of this array with the reversed position?
arr_2[::-1, ::-1]
# output
# array([[ 5, 1, 4, 10],
# [5, 2, 3, 9],
[11, 9, 2, 10]])
# ---------------------------------------------------------------------------------------
# Consider the array below.
arr_3 = np.random.randint(12, size=(3, 4))
print(my_arr)
# output
# [[8 1 0 5]
# [8 2 3 5]
# [3 8 6 4]]
# ---------------------------------------------------------------------------------------
# Let's get a subarray of the array above.
sub_of_arr_3 = arr_3[:2, :2]
print(sub_of_arr_3)
# output
# [[ 8 3]
# [4 10]]
# ---------------------------------------------------------------------------------------
# Consider the array below.
grid = np.array([1, 2, 3, 4, 5])
print(grid)
# output
# [1 2 3 4 5]
# ---------------------------------------------------------------------------------------
# Let's reshape this array.
grid = np.array([1, 2, 3, 4, 5])
grid.reshape(1, 5)
# output
# array([[1, 2, 3, 4, 5]])
grid.reshape(5, 1)
# output
# array([[1],
# [2],
# [3],
# [4],
# [5]])
# --------------------------------------------------------------------------------------
# What is concatenate method() used for??
arr_5 = np.array([[10, 20, 30],
[40, 50, 60]])
np.concatenate([arr_5, arr_5])
# output
# array([[10, 20, 30],
# [40, 50, 60],
# [10, 20, 30],
# [40, 50, 60]])
# ----------------------------------------------------------------------------------------
# Look at the 2 arrays below.
array_1 = np.array([100, 200, 300])
array_2 = np.array([[400, 500, 600],
[700, 800, 900]])
print(array_1)
print(array_2)
# output
# [100 200 300]
# [[400 500 600]
# [700 800 900]]
# ----------------------------------------------------------------------------------------
# Now, let's stack these arrays vertically.
np.vstack([array_1, array_2])
# output
# array([[100, 200, 300],
# [400, 500, 600],
# [700, 800, 900]])
# ----------------------------------------------------------------------------------------
# Now, let's stack array_2 with the array below horizontally.
array_3 = ([[111],
[111]])
np.hstack([array_2, array_3])
# output
# array([[400, 500, 600, 111],
# [700, 800, 900, 111]])
# ----------------------------------------------------------------------------------------
# Consider the array below.
gridd = np.arange(36).reshape((6, 6))
gridd
# output
# array([[0, 1, 2, 3, 4, 5],
# [6, 7, 8, 9, 10, 11],
# [12, 13, 14, 15, 16, 17],
# [18, 19, 20, 21, 22, 23],
# [24, 25, 26, 27, 28, 29],
# [30, 31, 32, 33, 34, 35]])
# -----------------------------------------------------------------------------------------
# Let's print the upper and lower sections of the array above.
upper, lower = np.vsplit(gridd, [2])
print(upper)
print(lower)
# output
# [[ 0 1 2 3 4 5]
# [6 7 8 9 10 11]]
# [[12 13 14 15 16 17]
# [18 19 20 21 22 23]
# [24 25 26 27 28 29]
# [30 31 32 33 34 35]]
# ------------------------------------------------------------------------------------------
# Let's print the left and right sides of the array.
left, right = np.hsplit(gridd, [3])
print(left)
print(right)
# output
# [[ 0 1 2]
# [6 7 8]
# [12 13 14]
# [18 19 20]
# [24 25 26]
# [30 31 32]]
# [[ 3 4 5]
# [9 10 11]
# [15 16 17]
# [21 22 23]
# [27 28 29]
# [33 34 35]]
# ------------------------------------------------------------------------------------------
# Let's play with some operation in NumPy.
import numpy as np
arr_1 = np.arange(10)
print(arr_1)
print(arr_1 + 2)
print(arr_1 - 2)
print(arr_1 * 2)
print(arr_1 / 2)
print(arr_1 ** 2)
print(arr_1 % 2)
print(-(0.5 * arr_1 + 1) ** 2)
# output
# [0 1 2 3 4 5 6 7 8 9]
# [2 3 4 5 6 7 8 9 10 11]
# [-2 -1 0 1 2 3 4 5 6 7]
# [0 2 4 6 8 10 12 14 16 18]
# [0. 0.5 1. 1.5 2. 2.5 3. 3.5 4. 4.5]
# [0 1 4 9 16 25 36 49 64 81]
# [0 1 0 1 0 1 0 1 0 1]
# [-1. -2.25 -4. -6.25 -9. -12.25 -16. -20.25 -25. -30.25]
# ------------------------------------------------------------------------------------------
# This time, let's add a value by the add() method of NumPy.
np.add(arr_1, 3)
# output
# array([ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
# -----------------------------------------------------------------------------------------
np.power(arr_1, 2)
# output
# array([ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81])
# -----------------------------------------------------------------------------------------
# Let's work with Trigonometric functions.
theta = [0, 90, 120]
print("theta is ", theta)
print("sin(theta) is", np.sin(theta))
print("cos(theta) is", np.cos(theta))
print("tan(theta) is", np.tan(theta))
# output
# theta is [0, 90, 120]
# sin(theta) is [0. 0.89399666 0.58061118]
# cos(theta) is [ 1. -0.44807362 0.81418097]
# tan(theta) is [ 0. -1.99520041 0.71312301]
# -----------------------------------------------------------------------------------------
# How about working with the exponents and logarithms?
arr_2 = [10, 100, 1000]
print(np.log10(arr_2))
# output
# [1. 2. 3.]
# -----------------------------------------------------------------------------------------
# Let's work with some more complex operations than the previous ones...
# How about calculating the gamma of the elements below?
arr_3 = [1, 5, 10]
# This is where we use the scipy library...
from scipy import special
print(special.gamma(arr_3))
# output
# [1.0000e+00 2.4000e+01 3.6288e+05]
# ----------------------------------------------------------------------------------------
# Can you guess what reduce.(an operation) do with the elements of an array?
b = np.arange(1, 6)
np.add.reduce(b)
# 15
# ----------------------------------------------------------------------------------------
np.multiply.reduce(b)
# 120
# ----------------------------------------------------------------------------------------
# The accumulate() method is used for storing all the intermediate results of the computation.
np.add.accumulate(b)
# output
# array([ 1, 3, 6, 10, 15])
np.multiply.accumulate(b)
# output
# array([ 1, 2, 6, 24, 120])
# What is the output?
c = np.arange(1, 11)
np.multiply.outer(c, c)
# output
# array([[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
# [2, 4, 6, 8, 10, 12, 14, 16, 18, 20],
# [3, 6, 9, 12, 15, 18, 21, 24, 27, 30],
# [4, 8, 12, 16, 20, 24, 28, 32, 36, 40],
# [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],
# [6, 12, 18, 24, 30, 36, 42, 48, 54, 60],
# [7, 14, 21, 28, 35, 42, 49, 56, 63, 70],
# [8, 16, 24, 32, 40, 48, 56, 64, 72, 80],
# [9, 18, 27, 36, 45, 54, 63, 72, 81, 90],
# [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]])
# ----------------------------------------------------------------------------------------
# Let's work with multidimensional aggregates...
arr_4 = np.random.random((3, 5))
print(arr_4)
# output
# [[0.4590864 0.15863193 0.04614598 0.09418713 0.17370586]
# [0.258463 0.80133709 0.40317837 0.84018429 0.45459767]
# [0.46776983 0.29392778 0.85377642 0.40715413 0.27985886]]
# ---------------------------------------------------------------------------------------
# How about using an axis of 0 in order to specify the minimum value within each column?
arr_4.min(axis=0)
# output
# array([0.258463 , 0.15863193, 0.04614598, 0.09418713, 0.17370586])
# ---------------------------------------------------------------------------------------
# And using an axis of 1 in order to specify the maximum value whithin each column...
arr_4.max(axis=1)
# output
# array([0.4590864 , 0.84018429, 0.85377642])
# --------------------------------------------------------------------------------------
# Let's work with Boolean types in NumPy.
import numpy as np
my_arr = np.array([1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000])
my_arr <= 5999
# output
# array([ True, True, True, True, True, False, False, False, False])
my_arr > 6001
# output
# array([False, False, False, False, False, False, True, True, True])
my_arr != 9001
# output
# array([ True, True, True, True, True, True, True, True, True])
my_arr == 3000
# output
# array([False, False, True, False, False, False, False, False, False])
# --------------------------------------------------------------------------------------
rng = np.random.RandomState(0)
my_arr_2 = rng.randint(10, size=(6, 10))
my_arr_2
# output
# array([[5, 0, 3, 3, 7, 9, 3, 5, 2, 4],
# [7, 6, 8, 8, 1, 6, 7, 7, 8, 1],
# [5, 9, 8, 9, 4, 3, 0, 3, 5, 0],
# [2, 3, 8, 1, 3, 3, 3, 7, 0, 1],
# [9, 9, 0, 4, 7, 3, 2, 7, 2, 0],
# [0, 4, 5, 5, 6, 8, 4, 1, 4, 9]])
# -------------------------------------------------------------------------------------
# Let's count the values which are less than 7.
np.count_nonzero(my_arr_2 < 7)
# output
# 41
# -------------------------------------------------------------------------------------
# Let's do this process in another way.
np.sum(my_arr_2 < 7)
# output
# 41
# -------------------------------------------------------------------------------------
# Let's count the values less than 7 in each row.
np.sum(my_arr_2 < 7, axis=1)
# output
# array([8, 4, 7, 8, 6, 8])
# -------------------------------------------------------------------------------------
# Let's see whether there are any values greater or equal than 5.
np.any(my_arr_2 > 5)
# output
# True
# -------------------------------------------------------------------------------------
# Let's see whether all of the values are equal to 9 or not.
np.all(my_arr_2 == 9)
# output
# False
# -------------------------------------------------------------------------------------
# Remember the my_arr_2?
my_arr_2
# output
# array([[5, 0, 3, 3, 7, 9, 3, 5, 2, 4],
# [7, 6, 8, 8, 1, 6, 7, 7, 8, 1],
# [5, 9, 8, 9, 4, 3, 0, 3, 5, 0],
# [2, 3, 8, 1, 3, 3, 3, 7, 0, 1],
# [9, 9, 0, 4, 7, 3, 2, 7, 2, 0],
# [0, 4, 5, 5, 6, 8, 4, 1, 4, 9]])
# -------------------------------------------------------------------------------------
# Let's select values less than 4 by indexing on the Boolean array.
my_arr_2[my_arr_2 < 4]
# output
# array([0, 3, 3, 3, 2, 1, 1, 3, 0, 3, 0, 2, 3, 1, 3, 3, 3, 0, 1, 0, 3, 2,
2, 0, 0, 1])
# -------------------------------------------------------------------------------------
# Which operation should we choose between (OR and ||) and (AND and &) in order to compare the 2 arrays below?
A = np.array([1, 0, 1, 0, 1, 0], dtype=bool)
B = np.array([1, 1, 1, 0, 1, 1], dtype=bool)
A | B
# What happens if implementing A or B?
# output
# array([ True, True, True, False, True, True])
A & B
# What happens if implementing A and B?
# output
# array([ True, False, True, False, True, False])
my_arr_3 = np.arange(10)
(my_arr_3 > 2) & (my_arr_3 < 8)
# What happens if implementing (my_arr_3 > 2) and (my_arr_3 < 8) ?
# output
# array([False, False, False, True, True, True, True, True, False,
# False])
# --------------------------------------------------------------------------------------
# Let's get some elements of array_1 using its indices.
import numpy as np
rand = np.random.RandomState(12)
array_1 = rand.randint(100, size=10)
print(array_1)
# output
# [75 27 6 2 3 67 76 48 22 49]
# 1st approach
[array_1[2], array_1[4], array_1[7], array_1[9]]
# output
# [6, 3, 48, 49]
# 2nd approach
ind = [2, 4, 7, 9]
array_1[ind]
# output
# array([ 6, 3, 48, 49])
# 3rd approach
ind = np.array([[2, 4], [7, 9]])
array_1[ind]
# output
# array([[ 6, 3],
# [48, 49]])
# ------------------------------------------------------------------------------------
# Let's go deeper.
array_2 = np.arange(12).reshape((3, 4))
array_2
# output
# array([[ 0, 1, 2, 3],
# [4, 5, 6, 7],
# [8, 9, 10, 11]])
# ------------------------------------------------------------------------------------
# Which row is for which column?!
column = np.array([1, 2, 3])
row = np.array([0, 2, 1])
array_2[row, column]
# output
# array([ 1, 10, 7])
